/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fiberhome.nmpDataBusPlugin.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-09-18")
public class FileService {

  public interface Iface {

    public boolean recvFileState(String fullname, com.fiberhome.nmpDataBusPlugin.thrift.FileState fileState) throws com.fiberhome.nmpDataBusPlugin.thrift.RPCApplicationException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void recvFileState(String fullname, com.fiberhome.nmpDataBusPlugin.thrift.FileState fileState, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean recvFileState(String fullname, com.fiberhome.nmpDataBusPlugin.thrift.FileState fileState) throws com.fiberhome.nmpDataBusPlugin.thrift.RPCApplicationException, org.apache.thrift.TException
    {
      send_recvFileState(fullname, fileState);
      return recvFileState();
    }

    public void send_recvFileState(String fullname, com.fiberhome.nmpDataBusPlugin.thrift.FileState fileState) throws org.apache.thrift.TException
    {
      recvFileState_args args = new recvFileState_args();
      args.setFullname(fullname);
      args.setFileState(fileState);
      sendBase("recvFileState", args);
    }

    public boolean recvFileState() throws com.fiberhome.nmpDataBusPlugin.thrift.RPCApplicationException, org.apache.thrift.TException
    {
      recvFileState_result result = new recvFileState_result();
      receiveBase(result, "recvFileState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "recvFileState failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void recvFileState(String fullname, com.fiberhome.nmpDataBusPlugin.thrift.FileState fileState, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      recvFileState_call method_call = new recvFileState_call(fullname, fileState, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recvFileState_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String fullname;
      private com.fiberhome.nmpDataBusPlugin.thrift.FileState fileState;
      public recvFileState_call(String fullname, com.fiberhome.nmpDataBusPlugin.thrift.FileState fileState, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fullname = fullname;
        this.fileState = fileState;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recvFileState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        recvFileState_args args = new recvFileState_args();
        args.setFullname(fullname);
        args.setFileState(fileState);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Object getResult() throws com.fiberhome.nmpDataBusPlugin.thrift.RPCApplicationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvFileState();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("recvFileState", new recvFileState());
      return processMap;
    }

    public static class recvFileState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recvFileState_args> {
      public recvFileState() {
        super("recvFileState");
      }

      public recvFileState_args getEmptyArgsInstance() {
        return new recvFileState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public recvFileState_result getResult(I iface, recvFileState_args args) throws org.apache.thrift.TException {
        recvFileState_result result = new recvFileState_result();
        try {
          result.success = iface.recvFileState(args.fullname, args.fileState);
          result.setSuccessIsSet(true);
        } catch (com.fiberhome.nmpDataBusPlugin.thrift.RPCApplicationException err) {
          result.err = err;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("recvFileState", new recvFileState());
      return processMap;
    }

    public static class recvFileState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, recvFileState_args, Boolean> {
      public recvFileState() {
        super("recvFileState");
      }

      public recvFileState_args getEmptyArgsInstance() {
        return new recvFileState_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            recvFileState_result result = new recvFileState_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            recvFileState_result result = new recvFileState_result();
            if (e instanceof com.fiberhome.nmpDataBusPlugin.thrift.RPCApplicationException) {
                        result.err = (com.fiberhome.nmpDataBusPlugin.thrift.RPCApplicationException) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, recvFileState_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.recvFileState(args.fullname, args.fileState,resultHandler);
      }
    }

  }

  public static class recvFileState_args implements org.apache.thrift.TBase<recvFileState_args, recvFileState_args._Fields>, java.io.Serializable, Cloneable, Comparable<recvFileState_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recvFileState_args");

    private static final org.apache.thrift.protocol.TField FULLNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fullname", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileState", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recvFileState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recvFileState_argsTupleSchemeFactory());
    }

    public String fullname; // required
    /**
     * 
     * @see com.fiberhome.nmpDataBusPlugin.thrift.FileState
     */
    public com.fiberhome.nmpDataBusPlugin.thrift.FileState fileState; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FULLNAME((short)1, "fullname"),
      /**
       * 
       * @see com.fiberhome.nmpDataBusPlugin.thrift.FileState
       */
      FILE_STATE((short)2, "fileState");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FULLNAME
            return FULLNAME;
          case 2: // FILE_STATE
            return FILE_STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FULLNAME, new org.apache.thrift.meta_data.FieldMetaData("fullname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_STATE, new org.apache.thrift.meta_data.FieldMetaData("fileState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.fiberhome.nmpDataBusPlugin.thrift.FileState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recvFileState_args.class, metaDataMap);
    }

    public recvFileState_args() {
    }

    public recvFileState_args(
      String fullname,
      com.fiberhome.nmpDataBusPlugin.thrift.FileState fileState)
    {
      this();
      this.fullname = fullname;
      this.fileState = fileState;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recvFileState_args(recvFileState_args other) {
      if (other.isSetFullname()) {
        this.fullname = other.fullname;
      }
      if (other.isSetFileState()) {
        this.fileState = other.fileState;
      }
    }

    public recvFileState_args deepCopy() {
      return new recvFileState_args(this);
    }

    @Override
    public void clear() {
      this.fullname = null;
      this.fileState = null;
    }

    public String getFullname() {
      return this.fullname;
    }

    public recvFileState_args setFullname(String fullname) {
      this.fullname = fullname;
      return this;
    }

    public void unsetFullname() {
      this.fullname = null;
    }

    /** Returns true if field fullname is set (has been assigned a value) and false otherwise */
    public boolean isSetFullname() {
      return this.fullname != null;
    }

    public void setFullnameIsSet(boolean value) {
      if (!value) {
        this.fullname = null;
      }
    }

    /**
     * 
     * @see com.fiberhome.nmpDataBusPlugin.thrift.FileState
     */
    public com.fiberhome.nmpDataBusPlugin.thrift.FileState getFileState() {
      return this.fileState;
    }

    /**
     * 
     * @see com.fiberhome.nmpDataBusPlugin.thrift.FileState
     */
    public recvFileState_args setFileState(com.fiberhome.nmpDataBusPlugin.thrift.FileState fileState) {
      this.fileState = fileState;
      return this;
    }

    public void unsetFileState() {
      this.fileState = null;
    }

    /** Returns true if field fileState is set (has been assigned a value) and false otherwise */
    public boolean isSetFileState() {
      return this.fileState != null;
    }

    public void setFileStateIsSet(boolean value) {
      if (!value) {
        this.fileState = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FULLNAME:
        if (value == null) {
          unsetFullname();
        } else {
          setFullname((String)value);
        }
        break;

      case FILE_STATE:
        if (value == null) {
          unsetFileState();
        } else {
          setFileState((com.fiberhome.nmpDataBusPlugin.thrift.FileState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FULLNAME:
        return getFullname();

      case FILE_STATE:
        return getFileState();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FULLNAME:
        return isSetFullname();
      case FILE_STATE:
        return isSetFileState();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recvFileState_args)
        return this.equals((recvFileState_args)that);
      return false;
    }

    public boolean equals(recvFileState_args that) {
      if (that == null)
        return false;

      boolean this_present_fullname = true && this.isSetFullname();
      boolean that_present_fullname = true && that.isSetFullname();
      if (this_present_fullname || that_present_fullname) {
        if (!(this_present_fullname && that_present_fullname))
          return false;
        if (!this.fullname.equals(that.fullname))
          return false;
      }

      boolean this_present_fileState = true && this.isSetFileState();
      boolean that_present_fileState = true && that.isSetFileState();
      if (this_present_fileState || that_present_fileState) {
        if (!(this_present_fileState && that_present_fileState))
          return false;
        if (!this.fileState.equals(that.fileState))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fullname = true && (isSetFullname());
      list.add(present_fullname);
      if (present_fullname)
        list.add(fullname);

      boolean present_fileState = true && (isSetFileState());
      list.add(present_fileState);
      if (present_fileState)
        list.add(fileState.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(recvFileState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFullname()).compareTo(other.isSetFullname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFullname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullname, other.fullname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileState()).compareTo(other.isSetFileState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileState, other.fileState);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recvFileState_args(");
      boolean first = true;

      sb.append("fullname:");
      if (this.fullname == null) {
        sb.append("null");
      } else {
        sb.append(this.fullname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileState:");
      if (this.fileState == null) {
        sb.append("null");
      } else {
        sb.append(this.fileState);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recvFileState_argsStandardSchemeFactory implements SchemeFactory {
      public recvFileState_argsStandardScheme getScheme() {
        return new recvFileState_argsStandardScheme();
      }
    }

    private static class recvFileState_argsStandardScheme extends StandardScheme<recvFileState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recvFileState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FULLNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fullname = iprot.readString();
                struct.setFullnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fileState = com.fiberhome.nmpDataBusPlugin.thrift.FileState.findByValue(iprot.readI32());
                struct.setFileStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recvFileState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fullname != null) {
          oprot.writeFieldBegin(FULLNAME_FIELD_DESC);
          oprot.writeString(struct.fullname);
          oprot.writeFieldEnd();
        }
        if (struct.fileState != null) {
          oprot.writeFieldBegin(FILE_STATE_FIELD_DESC);
          oprot.writeI32(struct.fileState.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recvFileState_argsTupleSchemeFactory implements SchemeFactory {
      public recvFileState_argsTupleScheme getScheme() {
        return new recvFileState_argsTupleScheme();
      }
    }

    private static class recvFileState_argsTupleScheme extends TupleScheme<recvFileState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recvFileState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFullname()) {
          optionals.set(0);
        }
        if (struct.isSetFileState()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFullname()) {
          oprot.writeString(struct.fullname);
        }
        if (struct.isSetFileState()) {
          oprot.writeI32(struct.fileState.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recvFileState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fullname = iprot.readString();
          struct.setFullnameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileState = com.fiberhome.nmpDataBusPlugin.thrift.FileState.findByValue(iprot.readI32());
          struct.setFileStateIsSet(true);
        }
      }
    }

  }

  public static class recvFileState_result implements org.apache.thrift.TBase<recvFileState_result, recvFileState_result._Fields>, java.io.Serializable, Cloneable, Comparable<recvFileState_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recvFileState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recvFileState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recvFileState_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public com.fiberhome.nmpDataBusPlugin.thrift.RPCApplicationException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recvFileState_result.class, metaDataMap);
    }

    public recvFileState_result() {
    }

    public recvFileState_result(
      boolean success,
      com.fiberhome.nmpDataBusPlugin.thrift.RPCApplicationException err)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recvFileState_result(recvFileState_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetErr()) {
        this.err = new com.fiberhome.nmpDataBusPlugin.thrift.RPCApplicationException(other.err);
      }
    }

    public recvFileState_result deepCopy() {
      return new recvFileState_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.err = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public recvFileState_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.fiberhome.nmpDataBusPlugin.thrift.RPCApplicationException getErr() {
      return this.err;
    }

    public recvFileState_result setErr(com.fiberhome.nmpDataBusPlugin.thrift.RPCApplicationException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.fiberhome.nmpDataBusPlugin.thrift.RPCApplicationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recvFileState_result)
        return this.equals((recvFileState_result)that);
      return false;
    }

    public boolean equals(recvFileState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(recvFileState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recvFileState_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recvFileState_resultStandardSchemeFactory implements SchemeFactory {
      public recvFileState_resultStandardScheme getScheme() {
        return new recvFileState_resultStandardScheme();
      }
    }

    private static class recvFileState_resultStandardScheme extends StandardScheme<recvFileState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recvFileState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.fiberhome.nmpDataBusPlugin.thrift.RPCApplicationException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recvFileState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recvFileState_resultTupleSchemeFactory implements SchemeFactory {
      public recvFileState_resultTupleScheme getScheme() {
        return new recvFileState_resultTupleScheme();
      }
    }

    private static class recvFileState_resultTupleScheme extends TupleScheme<recvFileState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recvFileState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recvFileState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new com.fiberhome.nmpDataBusPlugin.thrift.RPCApplicationException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

}
