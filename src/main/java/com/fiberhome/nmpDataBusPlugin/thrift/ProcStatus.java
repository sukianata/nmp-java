/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fiberhome.nmpDataBusPlugin.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-09-19")
public class ProcStatus implements org.apache.thrift.TBase<ProcStatus, ProcStatus._Fields>, java.io.Serializable, Cloneable, Comparable<ProcStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProcStatus");

  private static final org.apache.thrift.protocol.TField PROC_CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("ProcCPU", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField MEMORY_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("MemoryCost", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("Path", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProcStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProcStatusTupleSchemeFactory());
  }

  public double ProcCPU; // required
  public double MemoryCost; // required
  public String Path; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROC_CPU((short)1, "ProcCPU"),
    MEMORY_COST((short)2, "MemoryCost"),
    PATH((short)3, "Path");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROC_CPU
          return PROC_CPU;
        case 2: // MEMORY_COST
          return MEMORY_COST;
        case 3: // PATH
          return PATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROCCPU_ISSET_ID = 0;
  private static final int __MEMORYCOST_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROC_CPU, new org.apache.thrift.meta_data.FieldMetaData("ProcCPU", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEMORY_COST, new org.apache.thrift.meta_data.FieldMetaData("MemoryCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("Path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProcStatus.class, metaDataMap);
  }

  public ProcStatus() {
  }

  public ProcStatus(
    double ProcCPU,
    double MemoryCost,
    String Path)
  {
    this();
    this.ProcCPU = ProcCPU;
    setProcCPUIsSet(true);
    this.MemoryCost = MemoryCost;
    setMemoryCostIsSet(true);
    this.Path = Path;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProcStatus(ProcStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ProcCPU = other.ProcCPU;
    this.MemoryCost = other.MemoryCost;
    if (other.isSetPath()) {
      this.Path = other.Path;
    }
  }

  public ProcStatus deepCopy() {
    return new ProcStatus(this);
  }

  @Override
  public void clear() {
    setProcCPUIsSet(false);
    this.ProcCPU = 0.0;
    setMemoryCostIsSet(false);
    this.MemoryCost = 0.0;
    this.Path = null;
  }

  public double getProcCPU() {
    return this.ProcCPU;
  }

  public ProcStatus setProcCPU(double ProcCPU) {
    this.ProcCPU = ProcCPU;
    setProcCPUIsSet(true);
    return this;
  }

  public void unsetProcCPU() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROCCPU_ISSET_ID);
  }

  /** Returns true if field ProcCPU is set (has been assigned a value) and false otherwise */
  public boolean isSetProcCPU() {
    return EncodingUtils.testBit(__isset_bitfield, __PROCCPU_ISSET_ID);
  }

  public void setProcCPUIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROCCPU_ISSET_ID, value);
  }

  public double getMemoryCost() {
    return this.MemoryCost;
  }

  public ProcStatus setMemoryCost(double MemoryCost) {
    this.MemoryCost = MemoryCost;
    setMemoryCostIsSet(true);
    return this;
  }

  public void unsetMemoryCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMORYCOST_ISSET_ID);
  }

  /** Returns true if field MemoryCost is set (has been assigned a value) and false otherwise */
  public boolean isSetMemoryCost() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMORYCOST_ISSET_ID);
  }

  public void setMemoryCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMORYCOST_ISSET_ID, value);
  }

  public String getPath() {
    return this.Path;
  }

  public ProcStatus setPath(String Path) {
    this.Path = Path;
    return this;
  }

  public void unsetPath() {
    this.Path = null;
  }

  /** Returns true if field Path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.Path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.Path = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROC_CPU:
      if (value == null) {
        unsetProcCPU();
      } else {
        setProcCPU((Double)value);
      }
      break;

    case MEMORY_COST:
      if (value == null) {
        unsetMemoryCost();
      } else {
        setMemoryCost((Double)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROC_CPU:
      return getProcCPU();

    case MEMORY_COST:
      return getMemoryCost();

    case PATH:
      return getPath();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROC_CPU:
      return isSetProcCPU();
    case MEMORY_COST:
      return isSetMemoryCost();
    case PATH:
      return isSetPath();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProcStatus)
      return this.equals((ProcStatus)that);
    return false;
  }

  public boolean equals(ProcStatus that) {
    if (that == null)
      return false;

    boolean this_present_ProcCPU = true;
    boolean that_present_ProcCPU = true;
    if (this_present_ProcCPU || that_present_ProcCPU) {
      if (!(this_present_ProcCPU && that_present_ProcCPU))
        return false;
      if (this.ProcCPU != that.ProcCPU)
        return false;
    }

    boolean this_present_MemoryCost = true;
    boolean that_present_MemoryCost = true;
    if (this_present_MemoryCost || that_present_MemoryCost) {
      if (!(this_present_MemoryCost && that_present_MemoryCost))
        return false;
      if (this.MemoryCost != that.MemoryCost)
        return false;
    }

    boolean this_present_Path = true && this.isSetPath();
    boolean that_present_Path = true && that.isSetPath();
    if (this_present_Path || that_present_Path) {
      if (!(this_present_Path && that_present_Path))
        return false;
      if (!this.Path.equals(that.Path))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ProcCPU = true;
    list.add(present_ProcCPU);
    if (present_ProcCPU)
      list.add(ProcCPU);

    boolean present_MemoryCost = true;
    list.add(present_MemoryCost);
    if (present_MemoryCost)
      list.add(MemoryCost);

    boolean present_Path = true && (isSetPath());
    list.add(present_Path);
    if (present_Path)
      list.add(Path);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProcStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProcCPU()).compareTo(other.isSetProcCPU());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcCPU()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ProcCPU, other.ProcCPU);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemoryCost()).compareTo(other.isSetMemoryCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemoryCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MemoryCost, other.MemoryCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Path, other.Path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProcStatus(");
    boolean first = true;

    sb.append("ProcCPU:");
    sb.append(this.ProcCPU);
    first = false;
    if (!first) sb.append(", ");
    sb.append("MemoryCost:");
    sb.append(this.MemoryCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Path:");
    if (this.Path == null) {
      sb.append("null");
    } else {
      sb.append(this.Path);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProcStatusStandardSchemeFactory implements SchemeFactory {
    public ProcStatusStandardScheme getScheme() {
      return new ProcStatusStandardScheme();
    }
  }

  private static class ProcStatusStandardScheme extends StandardScheme<ProcStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProcStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROC_CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ProcCPU = iprot.readDouble();
              struct.setProcCPUIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEMORY_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.MemoryCost = iprot.readDouble();
              struct.setMemoryCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProcStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PROC_CPU_FIELD_DESC);
      oprot.writeDouble(struct.ProcCPU);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEMORY_COST_FIELD_DESC);
      oprot.writeDouble(struct.MemoryCost);
      oprot.writeFieldEnd();
      if (struct.Path != null) {
        oprot.writeFieldBegin(PATH_FIELD_DESC);
        oprot.writeString(struct.Path);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProcStatusTupleSchemeFactory implements SchemeFactory {
    public ProcStatusTupleScheme getScheme() {
      return new ProcStatusTupleScheme();
    }
  }

  private static class ProcStatusTupleScheme extends TupleScheme<ProcStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProcStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProcCPU()) {
        optionals.set(0);
      }
      if (struct.isSetMemoryCost()) {
        optionals.set(1);
      }
      if (struct.isSetPath()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetProcCPU()) {
        oprot.writeDouble(struct.ProcCPU);
      }
      if (struct.isSetMemoryCost()) {
        oprot.writeDouble(struct.MemoryCost);
      }
      if (struct.isSetPath()) {
        oprot.writeString(struct.Path);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProcStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.ProcCPU = iprot.readDouble();
        struct.setProcCPUIsSet(true);
      }
      if (incoming.get(1)) {
        struct.MemoryCost = iprot.readDouble();
        struct.setMemoryCostIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Path = iprot.readString();
        struct.setPathIsSet(true);
      }
    }
  }

}

