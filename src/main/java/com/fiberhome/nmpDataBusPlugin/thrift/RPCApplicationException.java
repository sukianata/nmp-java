/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fiberhome.nmpDataBusPlugin.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-09-19")
public class RPCApplicationException extends TException implements org.apache.thrift.TBase<RPCApplicationException, RPCApplicationException._Fields>, java.io.Serializable, Cloneable, Comparable<RPCApplicationException> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RPCApplicationException");

  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("Message", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RPCSTACK_TRACE_FIELD_DESC = new org.apache.thrift.protocol.TField("RPCStackTrace", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ErrorCode", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RPCApplicationExceptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RPCApplicationExceptionTupleSchemeFactory());
  }

  public String Message; // required
  public String RPCStackTrace; // required
  public int ErrorCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MESSAGE((short)1, "Message"),
    RPCSTACK_TRACE((short)2, "RPCStackTrace"),
    ERROR_CODE((short)3, "ErrorCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MESSAGE
          return MESSAGE;
        case 2: // RPCSTACK_TRACE
          return RPCSTACK_TRACE;
        case 3: // ERROR_CODE
          return ERROR_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ERRORCODE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("Message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RPCSTACK_TRACE, new org.apache.thrift.meta_data.FieldMetaData("RPCStackTrace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("ErrorCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RPCApplicationException.class, metaDataMap);
  }

  public RPCApplicationException() {
  }
  /*
   * 自定义构造函数
   * @author 黄帆
   */
  /*-----------------start------------------------*/
  public RPCApplicationException( String Messages) {
    this.Message=Messages;
  }
  public RPCApplicationException( String Messages,
                                  String RPCStackTraces) {
    this.Message=Messages;
    this.RPCStackTrace=RPCStackTraces;
  }
  public RPCApplicationException( String Messages,int code) {
    this.Message=Messages;
    this.ErrorCode=code;
  }
  /*-----------------end------------------------*/
  public RPCApplicationException(
    String Message,
    String RPCStackTrace,
    int ErrorCode)
  {
    this();
    this.Message = Message;
    this.RPCStackTrace = RPCStackTrace;
    this.ErrorCode = ErrorCode;
    setErrorCodeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RPCApplicationException(RPCApplicationException other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMessage()) {
      this.Message = other.Message;
    }
    if (other.isSetRPCStackTrace()) {
      this.RPCStackTrace = other.RPCStackTrace;
    }
    this.ErrorCode = other.ErrorCode;
  }

  public RPCApplicationException deepCopy() {
    return new RPCApplicationException(this);
  }

  @Override
  public void clear() {
    this.Message = null;
    this.RPCStackTrace = null;
    setErrorCodeIsSet(false);
    this.ErrorCode = 0;
  }

  public String getMessage() {
    return this.Message;
  }

  public RPCApplicationException setMessage(String Message) {
    this.Message = Message;
    return this;
  }

  public void unsetMessage() {
    this.Message = null;
  }

  /** Returns true if field Message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.Message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.Message = null;
    }
  }

  public String getRPCStackTrace() {
    return this.RPCStackTrace;
  }

  public RPCApplicationException setRPCStackTrace(String RPCStackTrace) {
    this.RPCStackTrace = RPCStackTrace;
    return this;
  }

  public void unsetRPCStackTrace() {
    this.RPCStackTrace = null;
  }

  /** Returns true if field RPCStackTrace is set (has been assigned a value) and false otherwise */
  public boolean isSetRPCStackTrace() {
    return this.RPCStackTrace != null;
  }

  public void setRPCStackTraceIsSet(boolean value) {
    if (!value) {
      this.RPCStackTrace = null;
    }
  }

  public int getErrorCode() {
    return this.ErrorCode;
  }

  public RPCApplicationException setErrorCode(int ErrorCode) {
    this.ErrorCode = ErrorCode;
    setErrorCodeIsSet(true);
    return this;
  }

  public void unsetErrorCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
  }

  /** Returns true if field ErrorCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorCode() {
    return EncodingUtils.testBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
  }

  public void setErrorCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERRORCODE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case RPCSTACK_TRACE:
      if (value == null) {
        unsetRPCStackTrace();
      } else {
        setRPCStackTrace((String)value);
      }
      break;

    case ERROR_CODE:
      if (value == null) {
        unsetErrorCode();
      } else {
        setErrorCode((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MESSAGE:
      return getMessage();

    case RPCSTACK_TRACE:
      return getRPCStackTrace();

    case ERROR_CODE:
      return getErrorCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MESSAGE:
      return isSetMessage();
    case RPCSTACK_TRACE:
      return isSetRPCStackTrace();
    case ERROR_CODE:
      return isSetErrorCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RPCApplicationException)
      return this.equals((RPCApplicationException)that);
    return false;
  }

  public boolean equals(RPCApplicationException that) {
    if (that == null)
      return false;

    boolean this_present_Message = true && this.isSetMessage();
    boolean that_present_Message = true && that.isSetMessage();
    if (this_present_Message || that_present_Message) {
      if (!(this_present_Message && that_present_Message))
        return false;
      if (!this.Message.equals(that.Message))
        return false;
    }

    boolean this_present_RPCStackTrace = true && this.isSetRPCStackTrace();
    boolean that_present_RPCStackTrace = true && that.isSetRPCStackTrace();
    if (this_present_RPCStackTrace || that_present_RPCStackTrace) {
      if (!(this_present_RPCStackTrace && that_present_RPCStackTrace))
        return false;
      if (!this.RPCStackTrace.equals(that.RPCStackTrace))
        return false;
    }

    boolean this_present_ErrorCode = true;
    boolean that_present_ErrorCode = true;
    if (this_present_ErrorCode || that_present_ErrorCode) {
      if (!(this_present_ErrorCode && that_present_ErrorCode))
        return false;
      if (this.ErrorCode != that.ErrorCode)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_Message = true && (isSetMessage());
    list.add(present_Message);
    if (present_Message)
      list.add(Message);

    boolean present_RPCStackTrace = true && (isSetRPCStackTrace());
    list.add(present_RPCStackTrace);
    if (present_RPCStackTrace)
      list.add(RPCStackTrace);

    boolean present_ErrorCode = true;
    list.add(present_ErrorCode);
    if (present_ErrorCode)
      list.add(ErrorCode);

    return list.hashCode();
  }

  @Override
  public int compareTo(RPCApplicationException other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Message, other.Message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRPCStackTrace()).compareTo(other.isSetRPCStackTrace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRPCStackTrace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RPCStackTrace, other.RPCStackTrace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorCode()).compareTo(other.isSetErrorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ErrorCode, other.ErrorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RPCApplicationException(");
    boolean first = true;

    sb.append("Message:");
    if (this.Message == null) {
      sb.append("null");
    } else {
      sb.append(this.Message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("RPCStackTrace:");
    if (this.RPCStackTrace == null) {
      sb.append("null");
    } else {
      sb.append(this.RPCStackTrace);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ErrorCode:");
    sb.append(this.ErrorCode);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RPCApplicationExceptionStandardSchemeFactory implements SchemeFactory {
    public RPCApplicationExceptionStandardScheme getScheme() {
      return new RPCApplicationExceptionStandardScheme();
    }
  }

  private static class RPCApplicationExceptionStandardScheme extends StandardScheme<RPCApplicationException> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RPCApplicationException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RPCSTACK_TRACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.RPCStackTrace = iprot.readString();
              struct.setRPCStackTraceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ErrorCode = iprot.readI32();
              struct.setErrorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RPCApplicationException struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.Message);
        oprot.writeFieldEnd();
      }
      if (struct.RPCStackTrace != null) {
        oprot.writeFieldBegin(RPCSTACK_TRACE_FIELD_DESC);
        oprot.writeString(struct.RPCStackTrace);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
      oprot.writeI32(struct.ErrorCode);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RPCApplicationExceptionTupleSchemeFactory implements SchemeFactory {
    public RPCApplicationExceptionTupleScheme getScheme() {
      return new RPCApplicationExceptionTupleScheme();
    }
  }

  private static class RPCApplicationExceptionTupleScheme extends TupleScheme<RPCApplicationException> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RPCApplicationException struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMessage()) {
        optionals.set(0);
      }
      if (struct.isSetRPCStackTrace()) {
        optionals.set(1);
      }
      if (struct.isSetErrorCode()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMessage()) {
        oprot.writeString(struct.Message);
      }
      if (struct.isSetRPCStackTrace()) {
        oprot.writeString(struct.RPCStackTrace);
      }
      if (struct.isSetErrorCode()) {
        oprot.writeI32(struct.ErrorCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RPCApplicationException struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.Message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.RPCStackTrace = iprot.readString();
        struct.setRPCStackTraceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ErrorCode = iprot.readI32();
        struct.setErrorCodeIsSet(true);
      }
    }
  }

}

